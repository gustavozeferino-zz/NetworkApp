g <- graph.lattice( c(8,8) )
plot(g)
adj <- get.adjacency(g)
Lag0Nodes <- colnames(data)
col <- ncol(adj)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)]
adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
Nvars <- 32
data <- matrix(runif(Nobs * Nvars, 0, 1), Nobs, Nvars)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
NodesToAnalyze <- apply(adj, 1, sum) !=  0
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
data <- data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
adj <- adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
k <- x0x1 %*% adj
k[x0x1 == 1] <- 0
A <- sum(k)
A_x <- colSums(k[, 1:ncol(data)])
k
x0x1
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
data[,12]
data[,12] <- 0
data
data[,12]
Lag0Nodes <- colnames(data)
# adj <- adjacency
col <- ncol(adj)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
NodesToAnalyze <- apply(adj, 1, sum) !=  0
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
x0x1
NodesToAnalyze
data[12,] <- 0
NodesToAnalyze <- apply(adj, 1, sum) !=  0
NodesToAnalyze
adj
str(adj)
ad[12,]
adj[12,]
adj[12,] <- 0
adj[,12] <- 0
NodesToAnalyze <- apply(adj, 1, sum) !=  0
NodesToAnalyze
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
x0x1
data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
(length(NodesToAnalyze)/2)
NodesToAnalyze[1:(length(NodesToAnalyze)/2)]
data <- data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
adj
adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
k <- x0x1 %*% adj
adj <- get.adjacency(g)
col <- ncol(adj)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
NodesToAnalyze <- apply(adj, 1, sum) !=  0
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
data <- data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
adj <- adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
Nobs <- 20
Nvars <- 32
data <- matrix(runif(Nobs * Nvars, 0, 1), Nobs, Nvars)
g <- graph.lattice( c(8,8) )
# plot(g)
adj <- get.adjacency(g)
Lag0Nodes <- colnames(data)
# adj <- adjacency
col <- ncol(adj)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
NodesToAnalyze <- apply(adj, 1, sum) !=  0
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
data <- data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
adj <- adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
x0x1 %*% adj
adj
x0x1
k <- x0x1 %*% adj
k
x0x1
k
x0x1
adj
k
xox1
x0x1
x0x1[19,64]
x0x1[19,64]*2
k
[x0x1 == 1]
x0x1 == 1
k[x0x1 == 1]
k[x0x1 == 1] <- 0
A <- sum(k)
A
colSums(k[, 1:ncol(data)])
1:ncol(data)
k[, 1:ncol(data)]
k[, 1:ncol(data)]
A_x <- apply(k[, 1:ncol(data)], 2, sum)
A_x
rep(0, ncol(data))
d <- rep(0, ncol(data))
(nrow(data) - 1)
for (j in 1:(nrow(data) - 1)) for (i in 1:ncol(data)) if (data[j,
i] == 0 & data[j + 1, i] == 1)
d[i] <- d[i] + 1
U <- sum(d)
U_x <- d
d
U
U_x
data <- matrix(round(runif(Nobs * Nvars, 0, 1), 0), Nobs, Nvars)
data
Lag0Nodes <- colnames(data)
# adj <- adjacency
col <- ncol(adj)
if (col != 2 * ncol(data)) {
adjlag01 <- matrix(0, 2 * col, 2 * col)
adjlag01[1:col, 1:col] <- adjlag01[(col + 1):(2 * col),
(col + 1):(2 * col)] <- adj
diag(adjlag01[(col + 1):(2 * col), (col + 1):(2 * col)]) <- 1
adj <- adjlag01
}
NodesToAnalyze <- apply(adj, 1, sum) !=  0
if (!any(NodesToAnalyze))
stop("There is no network")
x0x1 <- cbind(data[-1, ], data[-nrow(data), ])
x0x1 <- x0x1[, NodesToAnalyze, drop = FALSE]
data <- data[, NodesToAnalyze[1:(length(NodesToAnalyze)/2)],
drop = FALSE]
adj <- adj[NodesToAnalyze, NodesToAnalyze, drop = FALSE]
k <- x0x1 %*% adj
k[x0x1 == 1] <- 0
K
k
x0x1
A <- sum(k)
A_x <- apply(k[, 1:ncol(data)], 2, sum)
A_x
k <- x0x1 %*% adj
k
k[x0x1 == 1]
adj
x0x1
d <- rep(0, ncol(data))
for (j in 1:(nrow(data) - 1)) for (i in 1:ncol(data)) if (data[j,
i] == 0 & data[j + 1, i] == 1)
d[i] <- d[i] + 1
d
U <- sum(d)
U_x <- d
U_x
B <- sum(data)
B_x <- colSums(data)
B_x
B
data
e <- rep(0, ncol(data))
for (j in 1:(nrow(data) - 1)) for (i in 1:ncol(data)) if (data[j,
i] == 1 & data[j + 1, i] == 0)
e[i] <- e[i] + 1
D <- sum(e)
D_x <- e
inf.rate <- U/A
inf.rate_x <- U_x/A_x
inf.rate_x[is.nan(inf.rate_x)] <- 0
inf.rate_x[is.infinite(inf.rate_x)] <- 0
recov.rate <- D/B
recov.rate_x <- D_x/B_x
recov.rate_x[is.nan(recov.rate_x)] <- 0
recov.rate_x[is.infinite(recov.rate_x)] <- 0
perc.ind <- inf.rate/recov.rate
perc.ind_x <- inf.rate_x/recov.rate_x
res <- list(inf.rate = inf.rate, recov.rate = recov.rate,
perc.ind = perc.ind)
res_x <- list(inf.rate = inf.rate_x, recov.rate = recov.rate_x,
perc.ind = perc.ind_x)
class(res) <- class(res_x) <- "PercolationIndicator"
ifelse(separate == TRUE, result <- res_x, result <- res)
return(result)
}
U <- sum(d)
U_x <- d
B <- sum(data)
B_x <- colSums(data)
e <- rep(0, ncol(data))
for (j in 1:(nrow(data) - 1)) for (i in 1:ncol(data)) if (data[j,
i] == 1 & data[j + 1, i] == 0)
e[i] <- e[i] + 1
D <- sum(e)
D_x <- e
inf.rate <- U/A
inf.rate_x <- U_x/A_x
inf.rate_x[is.nan(inf.rate_x)] <- 0
inf.rate_x[is.infinite(inf.rate_x)] <- 0
recov.rate <- D/B
recov.rate_x <- D_x/B_x
recov.rate_x[is.nan(recov.rate_x)] <- 0
recov.rate_x[is.infinite(recov.rate_x)] <- 0
perc.ind <- inf.rate/recov.rate
perc.ind_x <- inf.rate_x/recov.rate_x
res <- list(inf.rate = inf.rate, recov.rate = recov.rate,
perc.ind = perc.ind)
res_x <- list(inf.rate = inf.rate_x, recov.rate = recov.rate_x,
perc.ind = perc.ind_x)
class(res) <- class(res_x) <- "PercolationIndicator"
ifelse(separate == TRUE, result <- res_x, result <- res)
return(result)
separate <- FALSE
inf.rate <- U/A
inf.rate_x <- U_x/A_x
inf.rate_x[is.nan(inf.rate_x)] <- 0
inf.rate_x[is.infinite(inf.rate_x)] <- 0
recov.rate <- D/B
recov.rate_x <- D_x/B_x
recov.rate_x[is.nan(recov.rate_x)] <- 0
recov.rate_x[is.infinite(recov.rate_x)] <- 0
perc.ind <- inf.rate/recov.rate
perc.ind_x <- inf.rate_x/recov.rate_x
res <- list(inf.rate = inf.rate, recov.rate = recov.rate,
perc.ind = perc.ind)
res_x <- list(inf.rate = inf.rate_x, recov.rate = recov.rate_x,
perc.ind = perc.ind_x)
class(res) <- class(res_x) <- "PercolationIndicator"
ifelse(separate == TRUE, result <- res_x, result <- res)
return(result)
inf.rate_x
perc.ind
perc.ind_x
24+27+4
library(qgraph)
library("qgraph")
library("psych")
data(bfi)
CorMat <- cor(bfi[,1:25])
qgraph(CorMat, graph = "pcor", layout = "spring")
CorMat
CorMat <- cor(bfi[,1:25], use = "complete.obs")
qgraph(CorMat, layout = "spring")
citation{"qgraph"}
citation("qgraph")
library(shiny)
library(shinyapps)
citation("shiny")
citation{"shinyapps"}
citation("shinyapps")
apropos("text")
library(qgraph)
?qgraph
library(pcalg)
install.packages("pcalg")
library(pcalg)
load("~/Documents/UvA/Jaar 5 2014-2015/Semester 2/Thesis/Simulation/Simulation May 12/resrg.RData")
plot(res_RG$density[1:10000], type = "l", bty = "n", xaxt = "n", las = 1, xlab = "Time steps", ylab = "Density RG")
plot(res_RG$density[1000000:1500000], type = "l", bty = "n", xaxt = "n", las = 1, xlab = "Time steps", ylab = "Density RG")
6/20
10/30
if(!"graph" %in% installed.packages())
{
install.packages("graph")
}
source("http://bioconductor.org/biocLite.R")
biocLite("graph")
biocLite("RBGL")
library("grapj")
library("graphj")
library("graphh")
install.packages("pcalg")
library(pcalg)
int <- 258 + 986
me <- 203 + 134 + 267 + 145 + 196
re <- 64 + 143 + 397 + 131 + 351 + 165 + 86
di <- 710
int + me + re + di
int <- 282 + 1167
me <- 203 + 134 + 266 + 146 + 185
re <- 64 + 143 + 400 + 179 + 352 + 163 + 145
di <- 747
int + me + re + di
int <- 270 + 1154
me <- 203 + 134 + 266 + 146 + 185
re <- 64 + 143 + 400 + 179 + 352 + 163 + 145
di <- 747
int + me + re + di
int <- 261 + 1033
me <- 146 + 124 + 248 + 141 + 173
re <- 64 + 128 + 295 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 248 + 141 + 173
re <- 64 + 128 + 295 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 245 + 141 + 173
re <- 64 + 128 + 295 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 241 + 141 + 173
re <- 64 + 128 + 295 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 241 + 141 + 173
re <- 64 + 134 + 295 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 241 + 141 + 173
re <- 64 + 133 + 204 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 261 + 1033
me <- 146 + 137 + 241 + 141 + 173
re <- 64 + 133 + 213 + 170 + 262 + 163 + 145
di <- 654
int + me + re + di
int <- 262 + 1037
me <- 146 + 128 + 241 + 141 + 171
re <- 64 + 133 + 213 + 89 + 170 + 262 + 161 + 145
di <- 654
int + me + re + di
## function for the mean of the density at time t+1
mut <- function(rho,p,pe=1,ne=5,h=0,pw=0,gamma=1,nn=50){
probr <- function(r,ne) ifelse(r<ne/2,p+h,1-p+h)
dimy <- ifelse(length(rho)>length(p),length(rho),length(p))
dimy <- ifelse(dimy>length(pe),dimy,length(pe))
y <- array(NA,dim=c(nn,dimy))
for(i in 0:nn) y[i,] <- choose(ne,i)*probr(i,ne)*(rho*pe)^(i)*(1-rho*pe)^(ne-i)
res <- ifelse(apply(y,2,sum)+ rho*pw > 1,1,apply(y,2,sum)+rho*pw)
#	res <- apply(y,2,sum) + rho*pw
return(res)
}
x <- seq(0,1,len=100)
murho <- mut(rho=x,p=.2,ne=949,pe=.1,h=0,pw=0,nn=950)
plot(x,murho,type='l',bty='n',col='blue',xlab=expression(rho),ylab=expression(mu(rho)),ylim=c(0,1),xlim=c(0,1))
lines(c(0,1),c(0,1),col='blue')
murho2 <- mut(rho=x,p=0.2,ne=ceiling(.1*950),pe=1,h=0,nn=950)
lines(x,murho2,col='red',lty=3)
text(locator(1),expression(p==0.15),col='blue')
install.packages("shinyIncubator")
library(devtools)
install_github(rstudio/shinyIncubator)
install_github("rstudio/shinyIncubator")
library(qgraph)
m <- matrix(c(0, 1,
0, 0), 2, 2)
qgraph(m)
centrality_auto(qgraph(m))
int <- 263 + 1041
me <- 146 + 128 + 241 + 149 + 171
re <- 64 + 133 + 213 + 89 + 170 + 262 + 161 + 145
di <- 627
int + me + re + di
library(devtools)
install_github("nutterb/pixiedust")
data.frame(participant = 1:10)
data.frame(participant = 1:10, Item1 = rnorm(10, 5, 2), Item2 = rnorm(10))
data.frame(participant = 1:10, Item1 = round(rnorm(10, 5, 2),0), Item2 = round(rnorm(10), 0))
data.frame(participant = 1:10, Item1 = round(rnorm(10, 5, 2),0), Item2 = round(sample(1:5, 10, TRUE), 0))
data.frame(participant = 1:10, Item1 = round(sample(1:7, 10, TRUE),0), Item2 = round(sample(1:5, 10, TRUE), 0))
data.frame(from = 1:10, to = sample(1:10, 10, TRUE))
data.frame(from = 1:5, to = c(2, 3, 4, 5, 1))
data.frame(Item1 = c(0, 1, 2, 1), Item2 = c(1, 0, 3, 2), Item3 = c(2, 3, 0, 1), Item4 = c(1, 2, 1, 0))
int <- 240 + 1023
me <- 146 + 156 + 249 + 149 + 171
re <- 64 + 133 + 213 + 89 + 170 + 262 + 161 + 145
di <- 627
int + me + re + di
0.0405013-0.0023
0.013333+0.0405013
if(!"shiny" %in% installed.packages())
{
install.packages("shiny")
}
if(!"qgraph" %in% installed.packages())
{
install.packages("qgraph")
}
if(!"ggplot2" %in% installed.packages())
{
install.packages("ggplot2")
}
if(!"huge" %in% installed.packages())
{
install.packages("huge")
}
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library("shiny")
library("qgraph")
library("shinyapps")
library("ggplot2")
runGitHub("NetworkApp", "JolandaKossakowski")
install.packages("devtools")
install.packages("devtools")
install.packages()
installed.packages()
"shinyapps" %in% installed.packages()
runGitHub("NetworkApp", "JolandaKossakowski")
if(!"devtools" %in% installed.packages())
{
install.packages("devtools")
}
library("devtools")
if(!"shinyapps" %in% installed.packages())
{
devtools::install_github("rstudio/shinyapps")
}
library("shinyapps")
runGitHub("NetworkApp", "JolandaKossakowski")
if(!"shiny" %in% installed.packages())
{
install.packages("shiny")
}
library("shiny")
runGitHub("NetworkApp", "JolandaKossakowski")
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runGitHub("NetworkApp", "JolandaKossakowski")
install.packages("sna")
install.packages("sna")
library(sna)
library(igraph)
data(bfi)
big5 <- bfi[,1:25]
transitivity(qgraph(cor(big5), graph = "cor"))
transitivity(qgraph(cor(big5, use  = "complete.obs"), graph = "cor"))
smallworldness(qgraph(cor(big5, use = "complete.obs")))
smallworldness(qgraph(cor(big5, use = "complete.obs"), graph = "glasso", sampleSize = nrow(big5)))
smallworldness(qgraph(cor(big5, use = "complete.obs"), graph = "glasso", sampleSize = nrow(big5), directed = TRUE))
smallworldness(qgraph(cor(big5, use = "complete.obs"), graph = "glasso", sampleSize = nrow(big5), weighted = FALSE))
shiny::runApp('GitHub/NetworkApp')
shiny::runApp('GitHub/NetworkApp')
s =smallworldness(qgraph(cor(big5, use = "complete.obs"), graph = "glasso", sampleSize = nrow(big5), directed = TRUE))
str(s)
s[1]
str(s[1])
shiny::runApp('GitHub/NetworkApp')
as.numeric(s[1])
shiny::runApp('GitHub/NetworkApp')
shiny::runApp('GitHub/NetworkApp')
library(shinyapps)
setwd("~/GitHub/NetworkApp")
deployApp()
shinyapps::setAccountInfo(name='jolandakos', token='2DE50B0E52032ACF8B6C32FF47C4D3E4', secret='BvDj4sH22ueSt+f0/4apUfzLdGCZIOWFMIfBWQvd')
deployApp()
cor(as.factor(big5[,1]))
cor(as.factor(big5[,1]), as.factor(big5[,2]))
