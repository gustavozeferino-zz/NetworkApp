(b0 * m) + (t(b %*% t(x))) + e
Xtilde = x - (m * (1/4)) %*% (t(m) %*% x)
Sxx = (1/4) * ((t(xtilde)) %*% xtilde)
Etilde = e - (m * (1/4)) %*% (t(m) %*% e)
Se = (1 / 3) * (t(Etilde) %*% Etilde)
Ytilde = y - (m * (1/4)) %*% (t(m) %*% y)
Sy = (1 / 3) * (t(Ytilde) %*% Ytilde)
Sxy = (1/4) * ((t(xtilde)) %*% (Ytilde))
Yhattilde = yhat - (m * (1/4)) %*% (t(m) %*% yhat)
Syhat = (1 / 3) * (t(Yhattilde) %*% Yhattilde)
yhat = (b0 * m) + (t(b %*% t(x)))
effectsize = (Syhat / Sy)
es = 1 - (Se / Sy)
effectsize
es
Etilde
Se
Syhat
shiny::runApp('Documents/UvA/Jaar 5 2014-2015/Semester 2/Programming The Next Step/Network App')
Yhattilde
yhat
m
b
x
t(x)
yhat
b0
m
Yhattilde
yhat
yhat
Yhattilde
Syhat
y
Ytilde
Sy
Etilde
Se
effectsize
es
x <- 1*runif(n, 0, 1)<=pi)
x <- 1*(runif(n, 0, 1)<=pi)
n <- 1000
pi <- 0.23
x <- 1*(runif(n, 0, 1))
x
x <- 1*(runif(n, 0, 1)<=pi)
z
x
n <- 1000
pi <- 0.23
x <- 1*(runif(n, 0, 1)<=pi)
mean(x)
n <- 1000000
pi <- 0.23
x <- 1*(runif(n, 0, 1)<=pi)
mean(x)
flip <- function(n, pi)
{
return(1*(runif(n, 0, 1)<=pi))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
flip <- function(n, pi)
{
return(mean(1*(runif(n, 0, 1)<=pi)))
}
flip(n,pi)
n <- 1000
N <- 1000
x <- matrix(0, N, n)
for(i in 1:N)
{
for(j in 1:n)
{
x[i,j] = 1*(runif(1, 0, 1)<=pi)
}
}
x <- 1*(runif(n*N, 0, 1)<=pi)
dim(x) <- c(N,n)
x
head(x)
p <- apply(x, 1, cumsum)
plot(p, type = "l")
p
plot(p[,1]/(1:n), type = "l", ylim = c(0,1))
x <- 1*(runif(n*N, 0, 1)<=pi) #does the same as the for-loop
dim(x) <- c(N,n)
p <- apply(x, 1, cumsum)
plot(p[,1]/(1:n), type = "l", ylim = c(0,1))
x <- 1*(runif(n*N, 0, 1)<=pi) #does the same as the for-loop
dim(x) <- c(N,n)
p <- apply(x, 1, cumsum)
plot(p[,1]/(1:n), type = "l", ylim = c(0,1))
plot(p[,1:n]/(1:n), type = "l", ylim = c(0,1))
matplot(p/(1:n), type = "l", ylim = c(0,1))
matplot(p/(1:n), type = "l", ylim = c(0,1), col = "grey")
abline(h = pi)
abline(h = pi + 0.1)
abline(v = pi - 0.1)
abline (v = pi)
abline(v = pi - 0.1)
p <- apply(x, 1, cumsum)
matplot(p/(1:n), type = "l", ylim = c(0,1), col = "grey")
abline(h = pi)
abline(v = pi)
abline(h = pi + 0.1)
abline(v = pi - 0.1)
abline(h = pi - 0.1)
plot.ecdf(p[100,]-pi)
plot.ecdf(p[1000,]-pi, add = TRUE, col= "blue") #empirical cumulative distribution function
plot.ecdf(p[100,]-pi)
plot.ecdf(p[100,]-pi)
plot.ecdf(p[1000,]-pi, add = TRUE, col= "blue") #empirical cumulative distribution function
plot.ecdf(p[1000,]-pi, add = TRUE, col= "blue") #empirical cumulative distribution function
plot.ecdf(p[100,]-pi, add = TRUE, col= "black")
plot.ecdf(p[100,]-pi, add = TRUE, col= "black")
plot.ecdf(p[100,]-pi, col= "black")
plot.ecdf(p[100,]-pi/1:n, col= "black")
p/ 1:n
p = p/1:n
plot.ecdf(p[100,]-pi, col= "black")
plot.ecdf(p[1000,]-pi, add = TRUE, col= "blue") #empirical cumulative distribution function
plot.ecdf(sqrt(100)*pi[100,]-pi)
plot.ecdf(sqrt(100)*p[100,]-pi)
lines(sort(sqrt(100)*p[100,]-pi)), pnorm(sqrt(100)*p[100,]-pi)), 0, pi*(1-pi))
lines(sort(sqrt(100)*p[100,]-pi), pnorm(sqrt(100)*p[100,]-pi), 0, pi*(1-pi))
lines(sort(sqrt(100)*p[100,]-pi), pnorm(sqrt(100)*p[100,]-pi), 0, pi*(1-pi)
)
lines(sort(sqrt(100)*(p[100,]-pi)),pnorm(sqrt(100)*(p[100,]-pi)), 0, pi*(1-pi))
lines(sort(sqrt(100)*(p[100,]-pi)),pnorm(sqrt(100)*(p[100,]-pi)), 0, sqrt(pi*(1-pi)))
lines(sort(sqrt(100)*(p[100,]-pi)),pnorm(sqrt(100)*(p[100,]-pi)), 0, sqrt(pi*(1-pi))
)
plot.ecdf(sqrt(100)*p[100,]-pi)
lines(sort(sqrt(100)*(p[100,]-pi)),pnorm(sqrt(100)*(p[100,]-pi)), 0, sqrt(pi*(1-pi))
)
lines(sort(sqrt(100)*(p[100,]-pi)), pnorm(sort(sqrt(100)*(p[100,]-pi)),0,sqrt(pi*(1-pi))))
t = 10
plot.ecdf(sqrt(t)*p[t,]-pi)
lines(sort(sqrt(t) * (p[t,] - pi)), pnorm(sort(sqrt(t) * (p[t,]-pi)), 0, sqrt(pi * (1 - pi))))
t <- 100
plot.ecdf(sqrt(t)*p[t,]-pi)
lines(sort(sqrt(t) * (p[t,] - pi)), pnorm(sort(sqrt(t) * (p[t,]-pi)), 0, sqrt(pi * (1 - pi))))
t <- 5
plot.ecdf(sqrt(t)*p[t,]-pi)
lines(sort(sqrt(t) * (p[t,] - pi)), pnorm(sort(sqrt(t) * (p[t,]-pi)), 0, sqrt(pi * (1 - pi))))
t <- 15
plot.ecdf(sqrt(t)*p[t,]-pi)
lines(sort(sqrt(t) * (p[t,] - pi)), pnorm(sort(sqrt(t) * (p[t,]-pi)), 0, sqrt(pi * (1 - pi))))
data <- matrix(0, n, t)
n <- 1000
t <- 2
data <- matrix(0, n, t)
data <- matrix(0, n, item)
item <- 2
data <- matrix(0, n, item)
b <- rnorm(50)
b.sort <- sort(b)
b.sort
theta <- rnorm(n, 0, 2)
theta <- rnorm(n)
delta <- rnorm(item)
data <- matrix(0, n, item)
for(i in 1:n)
{
for(j in 1:item)
{
data[i,j] = theta[i] - delta[j]
}
}
data
E <-(exp(data) / (1 + exp(data)))
E <-(exp(data) / (1 + exp(data)))
prop <- E
for(i in 1:n)
{
for(j in 1:item)
{
prop[i,j] = sample(c(0,1), 1, TRUE, prob = c(1 - E[i,j], E[i,j]))
}
}
prop
E
data
x <- 1*(runif(n, 0, 1)<=pi)
x
for(i in 1:n)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(n, 0, 1)<=pi)
}
}
person <- 1000
item <- 2
theta <- rnorm(n)
delta <- rnorm(item)
data <- matrix(0, person, item)
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(person, 0, 1)<=pi)
}
}
1*(runif(person, 0, 1)<=pi)
1*(runif(person, 0, 1)<=pi)
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)<=pi)
}
}
data
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)<=deta[j])
}
}
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)<=delta[j])
}
}
data
delta <- rnorm(item)
delta <- rnorm(item, 0, 2)
delta
delta <- rnorm(item)
delta
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)<=delta[j])
}
}
data
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
delta <- rnorm(item)
delta
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
delta <- rnorm(item)
delta
delta <- rnorm(item, 0, 1)
delta
delta <- rnorm(item, 0, 1)
delta
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
delta <- rnorm(0.01, 0.8)
data <- matrix(0, person, item)
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
delta <- c(0.1, 0.8)
data <- matrix(0, person, item)
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
delta <- c(0.1, 2)
data <- matrix(0, person, item)
for(i in 1:person)
{
for(j in 1:item)
{
data[i,j] = 1*(runif(1, 0, 1)>=delta[j])
}
}
data
runif(1, 0, 1)
runif(1, 0, 1)>=delta[1]
1*(runif(1, 0, 1)>=delta[1]
)
1*(runif(1, 0, 1)>=delta[1]
)
runif(1, 0, 1)>=delta[1])
runif(1, 0, 1)>=delta[1]
1*(runif(1, 0, 1)>=delta[1])
1*(runif(1, 0, 1)>=delta[1])
1*(runif(1, 0, 1)>=delta[1])
1*(runif(1, 0, 1)>=delta[1])
1*(runif(1, 0, 1)>=delta[1])
1*(runif(1, 0, 1)>=delta[1])
runif(1, 0, 1)
runif(1, 0, 1)>=delta[1]
TRUE*1
FALSE*1
1/50
log(50)/50
3.5
3/5
0.2/0.2
x <- function(p,q,t)
{
(1-exp(-(p+q)*t)) / ((1 + q*exp(-(p+q)*t)) / p)
}
plot(x)
x <- function(p,q,t)
{
res <- (1-exp(-(p+q)*t)) / ((1 + q*exp(-(p+q)*t)) / p)
return(res)
}
plot(res)
plot(x)
x <- function(p,q,t)
{
z = (1-exp(-(p+q)*t)) / ((1+q*exp(-(p+q)*t)) / p)
return(z)
}
x(0.01, 0.9, 2)
x(0.2, 0.9, 2)
x(0.2, 0.1, 2)
x <- function(p,q,t)
{
z = (1-exp((-(p+q)*t))) / ((1+q*exp((-(p+q)*t))) / p)
return(z)
}
x(0.01, 0.9, 2)
x(0.2, 0.1, 2)
x <- function(p,q,t)
{
z = (1-exp((-(p+q)*t))) / (1+q*exp((-(p+q)*t)) / p)
return(z)
}
x(0.01, 0.9, 2)
x(0.2, 0.1, 2)
x(0.2, 0.9, 2)
x <- function(n,p,pi,f)
{
z = (n-1)*p*(1-pi)*f
return(z)
}
x(51, 0.15, 0.5, 0.4)
x <- function(d, lambda, theta, ed)
{
z = (d*lambda*theta*(d^2))/((lambda*theta*d+1)*ed)
return(z)
}
10/10^2
1/(0.5*10)
1-(1/(0.5*10))
23.85/0.0ยง
23.85/0.06
23.85/3.59
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
N   = 8+7+6
var = 2.21
ss.total = var*(N-1)
ss.total
ss.model = ss.total - ss.error
ss.model
k        = 3
df.model = k - 1
df.model
MS.model = ss.model / df.model
MS.model
MS.error = ss.error / df.error
MS.error
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
N   = 8+7+6
var = 2.21
ss.total = var*(N-1)
ss.total
ss.model = ss.total - ss.error
ss.model
k        = 3
df.model = k - 1
df.model
df.error = N - k
df.error
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
N   = 8+7+6
var = 2.21
ss.total = var*(N-1)
ss.total
ss.model = ss.total - ss.error
ss.model
k        = 3
df.model = k - 1
df.model
df.error = N - k
df.error
MS.model = ss.model / df.model
MS.model
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
N   = 8+7+6
var = 2.21
ss.total = var*(N-1)
ss.total
ss.model = ss.total - ss.error
ss.model
k        = 3
df.model = k - 1
df.model
df.error = N - k
df.error
MS.model = ss.model / df.model
MS.model
MS.error = ss.error / df.error
MS.error
ss.1 = 2*(8-1)
ss.2 = 2.2*(7-1)
ss.3 = 1.9*(6-1)
ss.error = sum(ss.1, ss.2, ss.3)
ss.error
N   = 8+7+6
var = 2.21
ss.total = var*(N-1)
ss.total
ss.model = ss.total - ss.error
ss.model
k        = 3
df.model = k - 1
df.model
df.error = N - k
df.error
MS.model = ss.model / df.model
MS.model
MS.error = ss.error / df.error
MS.error
F = MS.model / MS.error
F
library(shiny)
runGitHub( "NetworkApp", "JolandaKossakowski")
setwd("~/GitHub/NetworkApp")
runGitHub( "NetworkApp", "JolandaKossakowski")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
