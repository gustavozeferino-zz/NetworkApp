{
    "contents" : "## Network App ##\n\nlibrary(\"shiny\")\nlibrary(\"devtools\")\nlibrary(\"ggplot2\")\nlibrary(\"huge\")\nlibrary(\"qgraph\")\nlibrary(\"psych\")\nlibrary(\"pcalg\")\n\nshinyUI(pageWithSidebar(\n  titlePanel(\"Network App\"),\n  sidebarPanel(position = \"right\",\n               \n               p(\"The options below are needed to specify how your file looks like. If you do not have any data but you want to see how the application works, click “Demo version”  and a dataset is automatically updated that is available via the psych package. The example dataset comprises of 25 NEO-PI-R items: 5 items per trait.\"),\n               \n               br(),\n               \n               # Upload file\n               fileInput('input', 'Choose CSV or TXT File',\n                         accept=c('text/csv', \n                                  'text/comma-separated-values,text/plain', \n                                  '.csv')),\n               \n               # specify if demo data is to be used\n               checkboxInput(\"demo\", \n                             label = \"Demo Version\", \n                             value = FALSE),\n               \n               # Specify kind of data\n               selectInput('sortdata', \n                           label = \"Specify the kind of data that is uploaded:\",\n                           choices = list(\"Raw Data\",\n                                          \"Adjacency Matrix\",\n                                          \"Edgelist\"), selected = \"Raw Data\"),   \n               tags$hr(),\n               # Contains the file a header? \n               checkboxInput('header', 'Header', TRUE),\n               checkboxInput(\"stringfactors\", \"Strings as factors\", FALSE),\n               \n               tags$hr(),\n               \n               # Select separator\n               radioButtons('sep', 'Separator',\n                            c(Comma=',',\n                              Semicolon=';',\n                              Tab='\\t',\n                              Whitespace = ''),\n                            '\\t'),\n               \n               tags$hr(),\n               \n               radioButtons('decimal', \"Decimal\",\n                            c(Period = \".\",\n                              Comma = \",\"),\n                            \",\"),\n               \n               tags$hr(),\n               \n               # Select appropriate quotes\n               radioButtons('quote', 'Quote',\n                            c(None='',\n                              'Double Quote'='\"',\n                              'Single Quote'=\"'\"),\n                            '\"'),\n               \n               # Specify coding for NAs\n               textInput(\"missing\",\n                         label = \"Missing value coding:\"),\n               \n               tags$hr(),\n               \n               # Download example data\n               downloadButton('downloadexample', 'Download Example Data'),\n  \n               h5(\"Authors\"),\n               p(\"Jolanda Kossakowski <mail@jolandakossakowski.eu> & Sacha Epskamp\")),\n  mainPanel(\n    tabsetPanel(\n      tabPanel(\"Network\", \n               br(),\n               br(),\n               plotOutput(\"network\"),\n               \n               br(),\n               br(),\n               br(),\n               br(),\n               br(),\n               br(),\n               fluidRow(\n                 column(4,\n                        \n                        # Download network as pdf\n                        downloadButton('downloadnetwork', 'Download PDF')),\n                 \n                 column(3,\n                        # Use node labels TRUE/FALSE\n                        checkboxInput(\"node_labels\",\n                                      label = \"Node Labels\", \n                                      value = TRUE)),\n                 \n                 column(3,\n                        # Set threshold for edge weight\n                        sliderInput(\"threshold\",\n                                    label = \"Edge Threshold:\",\n                                    min = 0,\n                                    max = 1,\n                                    value = 0))),\n               \n               fluidRow(\n                 column(4,\n                        \n                        # Insert title plot\n                        textInput(\"title\",\n                                  label = \"Title:\")),\n                 \n                 column(3,\n                        # Weighted graph TRUE/FALSE\n                        checkboxInput(\"weighted\",\n                                      label = \"Edge Weights\",\n                                      value = TRUE)),\n                 \n                 column(3,\n                        # Select minimum value edge weights\n                        sliderInput(\"minimum\",\n                                    label = \"Minimum Edge Weight:\",\n                                    min = 0,\n                                    max = 1,\n                                    value = 0))),\n               \n               fluidRow(\n                 column(4,\n                        # Choose network estimation method\n                        selectInput(\"method\",\n                                    label = \"Network Estimation Method:\",\n                                    choices = c(\"FDRnetwork\",\n                                                \"GLASSO\",\n                                                \"IC-Algorithm: DAG\",\n                                                \"IC-Algorithm: Skeleton\",\n                                                \"Partial Correlation\",\n                                                \"Pearson Correlation\",\n                                                \"VAR-model\"),\n                                    selected = \"Partial Correlation\")),\n                 column(3,        \n                        # Directed edges TRUE/FALSE\n                        checkboxInput(\"direction\",\n                                      label = \"Directed Edges\",\n                                      value = FALSE)),\n                 \n                 column(3,\n                        # Select maximum value edge weights\n                        sliderInput(\"maximum\",\n                                    label = \"Maximum Edge Weight:\",\n                                    min = 0,\n                                    max = 1,\n                                    value = 1))),\n               \n               fluidRow(\n                 column(4,\n                        # Select network layout\n                        selectInput(\"layout\",\n                                    label = \"Network Layout:\",\n                                    choices = c(\"Circle\", \n                                                \"Spring\", \n                                                \"Grouped Circle\"),\n                                    selected = \"Spring\")),\n                 \n                                  \n                 column(3,               \n                        # Plot graph details TRUE/FALSE\n                        checkboxInput(\"details\",\n                                      label = \"Graph Details\",\n                                      value = FALSE)),\n                 column(3,\n                        # Select cut-off value edge weights\n                        sliderInput(\"cut\",\n                                    label = \"Edge Cut-Off Value:\",\n                                    min = 0,\n                                    max = 1,\n                                    value = 0.1))),\n                 \n                 fluidRow(\n                   column(4,\n                          selectInput(\"FDRmethod\",\n                                      label = \"Method for FDR Network:\",\n                                      choices = c(\"Local FDR\",\n                                                  \"None\",\n                                                  \"p-value\",\n                                                  \"q-value\"),\n                                      selected = \"None\")),\n                   \n                   \n                   column(3,\n                          checkboxInput(\"normal\",\n                                        label = \"Non-Paranormal Transformation\",\n                                        value = FALSE)),\n                   \n                   column(3,\n                          # Select width edge\n                          sliderInput(\"edgesize\",\n                                      label = \"Edge Size:\",\n                                      min = 0,\n                                      max = 25,\n                                      value = 5))),\n               \n               fluidRow(\n                 column(4,\n                        selectInput(\"VARmethod\",\n                                    label = \"Distribution family for VAR-model:\",\n                                    choices = c(\"Binary\",\n                                                \"Gaussian\",\n                                                \"None\"),\n                                    selected = \"None\")),\n                        \n                 column(3,\n                        checkboxInput(\"pastelcol\",\n                                      label = \"Pastel colours\",\n                                      value = FALSE)),\n                 column(3,\n                        # Select size of nodes\n                        sliderInput(\"nodesize\",\n                                    label = \"Node Size:\",\n                                    min = 0,\n                                    max = 25,\n                                    value = 6.1))),\n               \n               fluidRow(\n                 column(4,\n                        selectInput(\"pcindep\",\n                                    label = \"Method for Conditional Independence IC-Algorithm:\",\n                                    choices = c(\"Binary\",\n                                                \"Discrete\",\n                                                \"D-separation\",\n                                                \"Gaussian\",\n                                                \"None\"),\n                                    selected = \"None\")),\n                 column(3,\n                        checkboxInput(\"diagonal\",\n                                      label = \"Plot Self-Loops\",\n                                      value = FALSE)),\n                 column(3,\n                        # Set cut-off value for FDR network\n                        sliderInput(\"cutoffFDR\",\n                                    label = \"Cut-off value FDR network:\",\n                                    min = 0.0001,\n                                    max = 1,\n                                    value = 0.05))),\n\n               fluidRow(\n                 column(4,\n                        selectInput(\"nodeshape\",\n                                    label = \"Node shape:\",\n                                    choices = c(\"Circle\",\n                                                \"Diamond\",\n                                                \"Heart\",\n                                                \"Square\",\n                                                \"Triangle\"),\n                                    selected = \"Circle\"))),\n               br(),\n               br()),\n      \n      \n      \n      \n      tabPanel(\"Centrality Plot\", \n               br(),\n               br(),\n               plotOutput(\"centplot\"),\n               \n               checkboxInput(\"horizontal\",\n                             label = \"Flip plot\", \n                             value = FALSE),\n               \n               checkboxInput(\"strength\",\n                             label = \"Strength\",\n                             value = FALSE),\n               \n               checkboxInput(\"betweenness\",\n                             label = \"Betweenness\",\n                             value = TRUE),\n               \n               checkboxInput(\"closeness\",\n                             label = \"Closeness\",\n                             value = TRUE),\n               \n               checkboxInput(\"indegree\",\n                             label = \"In Degree\",\n                             value = FALSE),\n               \n               checkboxInput(\"outdegree\",\n                             label = \"Out Degree\",\n                             value = FALSE),\n               \n               tags$hr(),         \n               downloadButton('downloadcentralityplot', 'Download Centrality Plot'),\n               br(),\n               br()),\n      \n      \n      tabPanel(\"Centrality Table\",\n               br(),\n               br(),\n               tableOutput(\"centtable\"),\n               \n               checkboxInput(\"strengthtab\",\n                             label = \"Strength\",\n                             value = FALSE),\n               \n               checkboxInput(\"betweennesstab\",\n                             label = \"Betweenness\",\n                             value = TRUE),\n               \n               checkboxInput(\"closenesstab\",\n                             label = \"Closeness\",\n                             value = TRUE),\n               \n               checkboxInput(\"indegreetab\",\n                             label = \"In Degree\",\n                             value = FALSE),\n               \n               checkboxInput(\"outdegreetab\",\n                             label = \"Out Degree\",\n                             value = FALSE),\n               \n               \n               \n               tags$hr(),\n               \n               downloadButton('downloadcentralitytable', 'Download Centrality Table'),\n               br(),\n               br()),\n      \n      tabPanel(\"Clustering Plot\", \n               br(),\n               br(),\n               plotOutput(\"clustplot\"),\n               \n               tags$hr(),\n               \n               checkboxInput(\"horizontal\",\n                             label = \"Flip plot\", \n                             value = FALSE),\n               \n               checkboxInput(\"ws\",\n                             label = \"WS\", \n                             value = TRUE),\n               \n               checkboxInput(\"zhang\",\n                             label = \"Zhang\",\n                             value = TRUE),\n               \n               checkboxInput(\"onnela\",\n                             label = \"Onnela\",\n                             value = TRUE),\n               \n               checkboxInput(\"barrat\",\n                             label = \"Barrat\",\n                             value = TRUE),               \n               \n               tags$hr(), \n               \n               downloadButton('downloadclusteringplot', 'Download Clustering Plot')),\n      \n      tabPanel(\"Clustering Table\",\n               br(),\n               br(),\n               tableOutput(\"clusttable\"),\n               \n               checkboxInput(\"wstab\",\n                             label = \"WS\", \n                             value = TRUE),\n               \n               checkboxInput(\"zhangtab\",\n                             label = \"Zhang\",\n                             value = TRUE),\n               \n               checkboxInput(\"onnelatab\",\n                             label = \"Onnela\",\n                             value = TRUE),\n               \n               checkboxInput(\"barrattab\",\n                             label = \"Barrat\",\n                             value = TRUE),\n               \n               tags$hr(),\n               \n               downloadButton('downloadclusteringtable', 'Download Clustering Table'),\n               br(),\n               br())\n\n      )  \n    )\n  )\n)\n",
    "created" : 1429785269894.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3113869176",
    "id" : "B3335EFD",
    "lastKnownWriteTime" : 1429785797,
    "path" : "~/GitHub/NetworkApp/ui.R",
    "project_path" : "ui.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}